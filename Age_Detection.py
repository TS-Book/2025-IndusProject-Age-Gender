# -*- coding: utf-8 -*-
"""
Created on Mon Feb 10 02:48:41 2025

@author: thana
"""

import cv2
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.models as models
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import os
import numpy as np

# üìå ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
IMG_SIZE = 224  # Resize ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Crop
BATCH_SIZE = 32
EPOCHS = 10
NUM_CLASSES = 5
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# üìå Haar Cascade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# üìå ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô 5 Classes
AGE_CLASSES = ["Child", "Teenager", "Adult", "Middle Age", "Aged"]

def age_to_class(age):
    if age <= 12:
        return 0  # Child
    elif 13 <= age <= 20:
        return 1  # Teenager
    elif 21 <= age <= 44:
        return 2  # Adult
    elif 45 <= age <= 64:
        return 3  # Middle Age
    else:
        return 4  # Aged

# üìå Image Preprocessing
transform = transforms.Compose([
    transforms.Resize((IMG_SIZE, IMG_SIZE)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

# üìå Custom Dataset Class
class AgeDataset(Dataset):
    def __init__(self, root_dir):
        self.root_dir = root_dir
        self.images = [f for f in os.listdir(root_dir) if f.endswith(".jpg") or f.endswith(".png")]

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path = os.path.join(self.root_dir, self.images[idx])
        image = cv2.imread(img_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # ‡∏î‡∏∂‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å filename (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "25_image.jpg" -> ‡∏≠‡∏≤‡∏¢‡∏∏ 25)
        age = int(self.images[idx].split("_")[0])
        label = age_to_class(age)

        # ‡πÉ‡∏ä‡πâ Haar cascade ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

        if len(faces) > 0:
            x, y, w, h = faces[0]  # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
            face_crop = image[y:y+h, x:x+w]  # Crop ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            face_pil = Image.fromarray(face_crop)  # Convert to PIL
        else:
            face_pil = Image.fromarray(image)  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏ï‡πá‡∏°

        image = transform(face_pil)  # Resize & Normalize
        return image, label

# üìå ‡πÇ‡∏´‡∏•‡∏î Dataset
train_dataset = AgeDataset("path_to_train_images")
train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)

# üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á Model WRN-16-8 + DMTL
class WRN16_8(nn.Module):
    def __init__(self, num_classes=NUM_CLASSES):
        super(WRN16_8, self).__init__()
        self.model = models.wide_resnet50_2(pretrained=True)  # ‡πÉ‡∏ä‡πâ WRN-50-2 ‡πÅ‡∏ó‡∏ô
        self.model.fc = nn.Linear(2048, num_classes)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Fully Connected Layer

    def forward(self, x):
        return self.model(x)

# üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = WRN16_8().to(DEVICE)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# üìå Train Loop
def train():
    model.train()
    for epoch in range(EPOCHS):
        total_loss = 0
        correct = 0
        total = 0

        for images, labels in train_loader:
            images, labels = images.to(DEVICE), labels.to(DEVICE)

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            total_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            correct += (predicted == labels).sum().item()
            total += labels.size(0)

        acc = correct / total * 100
        print(f"Epoch [{epoch+1}/{EPOCHS}], Loss: {total_loss:.4f}, Accuracy: {acc:.2f}%")

# üìå Train the model
train()
